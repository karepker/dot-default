" Set syntax on.
syntax on

" Get the user's vim files directory.
if !exists('g:vimfiles_directory')
	let g:vimfiles_directory = fnamemodify(expand("$MYVIMRC"), ':p:h')
endif

" Source all the vim files in a directory for modular vim configuration.
" Credit https://devel.tech/snippets/n/vIMvi29n/include-all-vim-files-in-a-directory/
function! SourceDirectory(directory)
	for s:fpath in split(globpath(a:directory, '*.vim'), '\n')
		execute 'source' s:fpath
	endfor
endfunction

" For some reason, this works to load vundle plugins, but dropping the
" equivalent vundle/ directory in .vim/plugin/ doesn't work: the runtimepath
" gets modified, but I can't run any of the commands the plugins define.
call SourceDirectory(g:vimfiles_directory . '/vundle/')

" Set mapleader and maplocalleader for <leader> and <localleader>.
let maplocalleader=','
" It's the same as the default value but set it for the sake of completeness and
" so :echo mapleader works.
let mapleader='\\'

" Default indent settings.
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Split settings.
set splitright  " Open vertical splits to the right.
set nosplitbelow  " Open horizontal splits above.
set equalalways  " Make splits always equal in size.

" Read files automatically from disk when they are changed (for git).
set autoread

" Change directory to the directory of the current buffer.
set autochdir

" Spell settings.
set spelllang=en_us  " Language should be English.
let &spellfile=g:vimfiles_directory . "/spell/en.utf-8.add"

" Turn on line numbering hybrid mode.
set number
set relativenumber

" Set the location for vim's swap files.
set directory=~/.vimbackup,.

" Disable all beeping by setting visualbell with no effect.
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Search options:
" Case insensitive search except when an uppercase letter is included.
set ignorecase
set smartcase
set hlsearch  " Highlight search.
set incsearch  " Search while typing.

" Stop highlighting searches when the escape key is pressed.
" Credit https://stackoverflow.com/a/1037182.
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Control text appearance.
set nolinebreak
set textwidth=80
set formatoptions+=t

" Only one space after a period when reflowing.
set nojoinspaces

" Turn on cursorline.
set cursorline

" Remap "Y" to behave consistently with "C" and "D" commands.
nnoremap Y y$

" Create normal mode shortcuts to insert new line below/above while remaining in
" normal mode.
nnoremap <Enter> o<Esc>k
nnoremap <S-Enter> O<Esc>j

" Easy access to editing common buffers.
" Open vimrc in a new tab by default.
nnoremap <leader>rv :tabedit $MYVIMRC<CR>
" Open gvimrc in a new vsplit by default (assuming vimrc is open in the other).
nnoremap <leader>rg :vsplit $MYGVIMRC<CR>

" Open current buffer in a horizontal split.
nnoremap ss :split %<CR>
" Open current buffer in a vertical split.
nnoremap vv :vsplit %<CR>

" :Q means :q
command! Q :q

" Function to reload configuration files.
if !exists("*ReloadConfig")
	function ReloadConfig()
		source $MYVIMRC
		if has('gui_running')
			source $MYGVIMRC
		endif
	endfunction
	nnoremap <leader>sv :call ReloadConfig()<CR>
endif

" Reload vimrc automatically when it is saved.
augroup autoreload_config
    autocmd!
    autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc
		\ call ReloadConfig()
augroup END

" Highlight text that goes over 80 characters
if exists('+colorcolumn')
	set colorcolumn=+1  " same column as textwidth
else
	augroup highlight_long_lines
		autocmd!
		autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
	augroup END
endif

" Highlight EOL whitespace, http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight default ExtraWhitespace ctermbg=darkred guibg=#382424
augroup highlight_extra_whitespace
	autocmd!
	autocmd ColorScheme * highlight ExtraWhitespace ctermbg=yellow guibg=yellow
	autocmd BufRead * match ExtraWhitespace /\s\+$/

	" The above flashes annoyingly while typing, be calmer in insert mode.
	autocmd InsertLeave * match ExtraWhitespace /\s\+$/
	autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
augroup END
